// Code generated by Guance Cloud Code Generation Pipeline. DO NOT EDIT.

package mute

import (
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
)

var resourceSchema = schema.Schema{
	Description:         "Mute Rule",
	MarkdownDescription: resourceDocument,
	Attributes: map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Description: "The Guance Resource Name (GRN) of cloud resource.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.UseStateForUnknown(),
			},
		},

		"created_at": schema.StringAttribute{
			Description: "The RFC3339/ISO8601 time string of resource created at.",
			Computed:    true,
		},

		"mute_ranges": schema.ListNestedAttribute{
			Description: "Mute Ranges",

			Optional: true,
			NestedObject: schema.NestedAttributeObject{
				Attributes: schemaMuteRange,
			},
		},

		"notify": schema.SingleNestedAttribute{
			Description: "Notify Options",

			Optional:   true,
			Attributes: schemaNotifyOptions,
		},

		"notify_targets": schema.ListNestedAttribute{
			Description: "Notify targets",

			Optional: true,
			NestedObject: schema.NestedAttributeObject{
				Attributes: schemaNotifyTarget,
			},
		},

		"onetime": schema.SingleNestedAttribute{
			Description: "Onetime",

			Optional:   true,
			Attributes: schemaOnetimeOptions,
		},

		"repeat": schema.SingleNestedAttribute{
			Description: "Repeat",

			Optional:   true,
			Attributes: schemaRepeatOptions,
		},

		"mute_tags": schema.ListNestedAttribute{
			Description: "Tags",

			Optional: true,
			NestedObject: schema.NestedAttributeObject{
				Attributes: schemaTag,
			},
		},
	},
}

// schemaMuteRange maps the resource schema data.
var schemaMuteRange = map[string]schema.Attribute{
	"type": schema.StringAttribute{
		Description: "Mute Range Type",

		MarkdownDescription: `
		Mute Range Type, value must be one of: *monitor*, *alert_policy*, other value will be ignored.
		`,
		Required: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
		Validators: []validator.String{
			stringvalidator.OneOf("monitor", "alert_policy"),
		},
	},

	"monitor": schema.SingleNestedAttribute{
		Description: "Monitor configuration",

		Optional:   true,
		Attributes: schemaMuteRangeMonitor,
	},

	"alert_policy": schema.SingleNestedAttribute{
		Description: "Alert Policy configuration",

		Optional:   true,
		Attributes: schemaMuteRangeAlertPolicy,
	},
}

// schemaMuteRangeAlertPolicy maps the resource schema data.
var schemaMuteRangeAlertPolicy = map[string]schema.Attribute{
	"id": schema.StringAttribute{
		Description: "Alert Policy ID",

		Required: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},
}

// schemaMuteRangeMonitor maps the resource schema data.
var schemaMuteRangeMonitor = map[string]schema.Attribute{
	"id": schema.StringAttribute{
		Description: "Monitor ID",

		Required: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},
}

// schemaNotifyOptions maps the resource schema data.
var schemaNotifyOptions = map[string]schema.Attribute{
	"message": schema.StringAttribute{
		Description: "Notify Message",

		Optional: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},

	"before_time": schema.StringAttribute{
		Description: "Notify Time",

		Optional: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},
}

// schemaNotifyTarget maps the resource schema data.
var schemaNotifyTarget = map[string]schema.Attribute{
	"type": schema.StringAttribute{
		Description: "Notify Type",

		MarkdownDescription: `
		Notify Type, value must be one of: *member_group*, *notification*, other value will be ignored.
		`,
		Required: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
		Validators: []validator.String{
			stringvalidator.OneOf("member_group", "notification"),
		},
	},

	"member_group": schema.SingleNestedAttribute{
		Description: "MemberGroup",

		Optional:   true,
		Attributes: schemaNotifyTargetMemberGroup,
	},

	"notification": schema.SingleNestedAttribute{
		Description: "Notification",

		Optional:   true,
		Attributes: schemaNotifyTargetNotification,
	},
}

// schemaNotifyTargetMemberGroup maps the resource schema data.
var schemaNotifyTargetMemberGroup = map[string]schema.Attribute{
	"id": schema.StringAttribute{
		Description: "MemberGroup ID",

		Required: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},
}

// schemaNotifyTargetNotification maps the resource schema data.
var schemaNotifyTargetNotification = map[string]schema.Attribute{
	"id": schema.StringAttribute{
		Description: "Notification ID",

		Required: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},
}

// schemaOnetimeOptions maps the resource schema data.
var schemaOnetimeOptions = map[string]schema.Attribute{
	"start": schema.StringAttribute{
		Description: "Start",

		Optional: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},

	"end": schema.StringAttribute{
		Description: "End",

		Optional: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},
}

// schemaRepeatCrontabSet maps the resource schema data.
var schemaRepeatCrontabSet = map[string]schema.Attribute{
	"min": schema.StringAttribute{
		Description: "Min",

		Optional: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},

	"hour": schema.StringAttribute{
		Description: "Hour",

		Optional: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},

	"day": schema.StringAttribute{
		Description: "Day",

		Optional: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},

	"month": schema.StringAttribute{
		Description: "Month",

		Optional: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},

	"week": schema.StringAttribute{
		Description: "Week",

		Optional: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},
}

// schemaRepeatOptions maps the resource schema data.
var schemaRepeatOptions = map[string]schema.Attribute{
	"start": schema.StringAttribute{
		Description: "Start",

		Optional: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},

	"end": schema.StringAttribute{
		Description: "End",

		Optional: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},

	"crontab_duration": schema.StringAttribute{
		Description: "Crontab Duration",

		Optional: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},

	"expire": schema.StringAttribute{
		Description: "Repeat Expire",

		Optional: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},

	"crontab": schema.SingleNestedAttribute{
		Description: "Crontab configuration",

		Optional:   true,
		Attributes: schemaRepeatCrontabSet,
	},
}

// schemaTag maps the resource schema data.
var schemaTag = map[string]schema.Attribute{
	"key": schema.StringAttribute{
		Description: "Tag",

		Required: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},

	"value": schema.StringAttribute{
		Description: "Tag Value",

		Required: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},
}
