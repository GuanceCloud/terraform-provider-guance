// Code generated by Guance Cloud Code Generation Pipeline. DO NOT EDIT.

package blacklist

import (
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

var resourceSchema = schema.Schema{
	Description:         "BlackList",
	MarkdownDescription: resourceDocument,
	Attributes: map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Description: "The Guance Resource Name (GRN) of cloud resource.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.UseStateForUnknown(),
			},
		},

		"created_at": schema.StringAttribute{
			Description: "The RFC3339/ISO8601 time string of resource created at.",
			Computed:    true,
		},

		"source": schema.SingleNestedAttribute{
			Description: "Source",

			Required:   true,
			Attributes: schemaSource,
		},

		"filter_rules": schema.ListNestedAttribute{
			Description: "Filters",

			Optional: true,
			NestedObject: schema.NestedAttributeObject{
				Attributes: schemaFilter,
			},
		},
	},
}

// schemaFilter maps the resource schema data.
var schemaFilter = map[string]schema.Attribute{
	"name": schema.StringAttribute{
		Description: "Name",

		Required: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},

	"operation": schema.StringAttribute{
		Description: "Operation",

		MarkdownDescription: `
		Operation, value must be one of: *in*, *not in*, *match*, *not match*, other value will be ignored.
		`,
		Required: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
		Validators: []validator.String{
			stringvalidator.OneOf("in", "not in", "match", "not match"),
		},
	},

	"condition": schema.StringAttribute{
		Description: "Condition, represented by DQL",

		Required: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},

	"values": schema.ListAttribute{
		Description: "Values",

		Optional:    true,
		ElementType: types.StringType,
		PlanModifiers: []planmodifier.List{
			listplanmodifier.RequiresReplace(),
		},
	},
}

// schemaSource maps the resource schema data.
var schemaSource = map[string]schema.Attribute{
	"type": schema.StringAttribute{
		Description: "Source Type",

		MarkdownDescription: `
		Source Type, value must be one of: *logging*, *object*, *custom_object*, *network*, *tracing*, *rum*, *security*, *keyevent*, *metric*, other value will be ignored.
		`,
		Required: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
		Validators: []validator.String{
			stringvalidator.OneOf("logging", "object", "custom_object", "network", "tracing", "rum", "security", "keyevent", "metric"),
		},
	},

	"name": schema.StringAttribute{
		Description: "Source",

		Optional: true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.RequiresReplace(),
		},
	},
}
